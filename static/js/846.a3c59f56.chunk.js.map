{"version":3,"file":"static/js/846.a3c59f56.chunk.js","mappings":"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","sources":["components/atoms/Button/index.tsx","components/atoms/Div/index.tsx","components/atoms/H1/index.tsx","components/atoms/Input/Input.tsx","components/atoms/Main/index.tsx","components/atoms/Span/index.tsx","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/send/send.js","pages/Register/index.tsx","pages/Register/Register.functions.ts"],"sourcesContent":["import classNames from 'classnames';\nimport { IButton } from './Button.types';\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @param {Function} onClick - custom function to the onClick Prop Button\n * @param {string | number | boolean | object} onClickValue - value to pass to the onClick function\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function Button({\n  children,\n  customClassNames,\n  onClick,\n  onClickValue,\n  isDisabled,\n  type\n}: IButton): JSX.Element {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return (\n    <button\n      type={type ?? 'button'}\n      className={classNames(customClassNames)}\n      onClick={() => onClick(onClickValue)}\n      disabled={isDisabled}>\n      {children}\n    </button>\n  );\n}\n","import classNames from 'classnames';\nimport { IDiv } from './Div.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function Div({ children, customClassNames }: IDiv) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <div className={classNames(customClassNames)}>{children}</div>;\n}\n","import classNames from 'classnames';\nimport { IH1 } from './H1.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function ASide({ children, customClassNames }: IH1) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <h1 className={classNames(customClassNames)}>{children}</h1>;\n}\n","import classNames from 'classnames';\nimport { IInput } from './Input.types';\n\n/**\n * @param {string | undefined} src - string that uses to render image\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @param {string} alt - string display when image not load correctly or complete\n * @returns JSX/HTML Element\n */\nexport default function Input({\n  name,\n  customClassNames,\n  type,\n  onChange,\n  max,\n  min,\n  placeholder\n}: IInput): JSX.Element {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return (\n    <input\n      name={name}\n      type={type}\n      max={max}\n      min={min}\n      className={classNames(customClassNames)}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  );\n}\n","import classNames from 'classnames';\nimport { IMain } from './Main.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent t\n */\n\nexport default function Main({ children, customClassNames }: IMain) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <main className={classNames(customClassNames)}>{children}</main>;\n}\n","import classNames from 'classnames';\nimport { ISpan } from './Span.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function Span({ children, customClassNames }: ISpan) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <span className={classNames(customClassNames)}>{children}</span>;\n}\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.10.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { useFormik } from \"formik\";\nimport * as Yup from 'yup';\n\nimport Button from \"../../components/atoms/Button\";\nimport Div from \"../../components/atoms/Div\";\nimport H1 from \"../../components/atoms/H1\";\nimport Input from \"../../components/atoms/Input/Input\";\nimport Main from \"../../components/atoms/Main\";\nimport Span from \"../../components/atoms/Span\";\nimport { sendEmail } from \"./Register.functions\";\n\nexport default function Register(){\n  // --- Hooks -----------------------------------------------------------------\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Required'),\n    id: Yup.string().required('Required'),\n    email: Yup.string().email('Invalid email').required('Required'),\n  })\n  const formik = useFormik({\n    initialValues: { name: '', email: '', id: '' },\n    onSubmit: (values) => {\n      sendEmail(values.name, values.email);\n      console.log(values);\n    },\n    validationSchema,\n  });\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------  \n  // --- END: Data and handlers ------------------------------------------------\n  return <>\n    <Main customClassNames=\"bg-desktop h-screen flex flex-1 justify-center items-center\">\n      <form onSubmit={formik.handleSubmit} className=\"bg-white w-4/5 lg:w-2/5 h-4/5 p-5 flex flex-col justify-center items-center gap-5\">\n        <H1 customClassNames=\"text-2xl\">Formato de Registro</H1>\n        <Div customClassNames=\"flex flex-col flex-1 w-full px-5 gap-5 justify-center\">\n          <Span>Nombre</Span>\n          <Input \n            id=\"name\" \n            name=\"name\" \n            type=\"text\" \n            value={formik.values.name}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full border-b-2 border-black\"\n          />\n          <Span>Correo Electronico</Span>\n          <Input \n            id=\"email\" \n            name=\"email\" \n            type=\"text\" \n            value={formik.values.email}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full border-b-2 border-black\"\n          />\n          <Span>Documento de Identidad</Span>\n          <Input \n            id=\"id\" \n            name=\"id\" \n            type=\"text\" \n            value={formik.values.id}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full border-b-2 border-black\"\n          />\n          <Span>Tipo de Donativo</Span>\n        </Div>\n        <Button \n          onClick={() => {}} \n          onClickValue={true} \n          customClassNames=\"bg-medium-turquoise p-4 w-full lg:w-96 rounded-lg text-white text-lg\"\n          type='submit'\n        >\n          Registrar\n        </Button>\n      </form >      \n    </Main>\n  </>\n}","import emailjs from \"@emailjs/browser\";\n\nexport const sendEmail = (to_name: string, to_email: string) => {\n  const templateParams = {\n    to_name,\n    to_email,\n    qr:\n      \"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=&\" +\n      to_email,\n  };\n  // serviceId, templateId, templateParams, publicKey\n  emailjs\n    .send(\n      \"service_8rujj47\",\n      \"template_t29chmv\",\n      templateParams,\n      \"cgmGhlqI_1tJf45Y3\"\n    )\n    .then(\n      (res) => {\n        console.log(\"respuesta de emailJs: \", res);\n      },\n      (err) => {\n        console.log(\"error de emailJs: \", err);\n      }\n    );\n};"],"names":["Button","children","customClassNames","onClick","onClickValue","isDisabled","type","className","classNames","disabled","Div","ASide","Input","name","onChange","max","min","placeholder","Main","Span","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","Register","validationSchema","Yup","shape","required","id","email","formik","useFormik","initialValues","onSubmit","values","to_name","to_email","emailjs","qr","then","res","console","log","err","handleSubmit","H1","value","onBlur","handleBlur","handleChange"],"sourceRoot":""}