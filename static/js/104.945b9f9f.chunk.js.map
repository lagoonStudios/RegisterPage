{"version":3,"file":"static/js/104.945b9f9f.chunk.js","mappings":"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","sources":["components/atoms/Button/index.tsx","components/atoms/Div/index.tsx","components/atoms/H1/index.tsx","components/atoms/Input/Input.tsx","components/atoms/Main/index.tsx","components/templates/Login/index.tsx","components/atoms/Span/index.tsx","pages/Main/Main.types.ts","components/templates/Register/index.tsx","components/templates/Register/Register.functions.ts","pages/Main/index.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { IButton } from './Button.types';\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @param {Function} onClick - custom function to the onClick Prop Button\n * @param {string | number | boolean | object} onClickValue - value to pass to the onClick function\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function Button({\n  children,\n  customClassNames,\n  onClick,\n  onClickValue,\n  isDisabled,\n  type\n}: IButton): JSX.Element {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return (\n    <button\n      type={type ?? 'button'}\n      className={classNames(customClassNames)}\n      onClick={() => onClick(onClickValue)}\n      disabled={isDisabled}>\n      {children}\n    </button>\n  );\n}\n","import classNames from 'classnames';\nimport { IDiv } from './Div.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function Div({ children, customClassNames }: IDiv) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <div className={classNames(customClassNames)}>{children}</div>;\n}\n","import classNames from 'classnames';\nimport { IH1 } from './H1.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function ASide({ children, customClassNames }: IH1) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <h1 className={classNames(customClassNames)}>{children}</h1>;\n}\n","import classNames from 'classnames';\nimport { IInput } from './Input.types';\n\n/**\n * @param {string | undefined} src - string that uses to render image\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @param {string} alt - string display when image not load correctly or complete\n * @returns JSX/HTML Element\n */\nexport default function Input({\n  name,\n  customClassNames,\n  type,\n  onChange,\n  max,\n  min,\n  placeholder\n}: IInput): JSX.Element {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return (\n    <input\n      name={name}\n      type={type}\n      max={max}\n      min={min}\n      className={classNames(customClassNames)}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  );\n}\n","import classNames from 'classnames';\nimport { IMain } from './Main.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent t\n */\n\nexport default function Main({ children, customClassNames }: IMain) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <main className={classNames(customClassNames)}>{children}</main>;\n}\n","import { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport Button from \"../../atoms/Button\";\nimport Div from \"../../atoms/Div\";\nimport H1 from \"../../atoms/H1\";\nimport Input from \"../../atoms/Input/Input\";\nimport Main from \"../../atoms/Main\";\nimport { ILogin } from './Login.types';\n\nexport default function Login({ setState }: ILogin) {\n  // --- Hooks -----------------------------------------------------------------\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('Required'),\n    password: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Required'),\n  })\n  const formik = useFormik({\n    initialValues: { username: '', password: '' },\n    onSubmit: (values) => {\n      console.log(values);\n      setState(1);\n    },\n    validationSchema,\n  });\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <>\n    <Main customClassNames=\"bg-desktop h-screen flex flex-1 justify-center items-center\">\n      <form onSubmit={formik.handleSubmit} className=\"bg-white w-4/5 lg:w-2/5 h-3/5 lg:h-4/5 lg:p-5 flex flex-col items-center gap-10 justify-center\">\n        <H1 customClassNames=\"text-3xl\">Inicio de Sesión</H1>\n        <Div customClassNames=\"flex flex-col w-full px-5 gap-10 justify-center items-center\">\n          <Input\n            id='username'\n            name=\"username\"\n            type=\"text\"\n            value={formik.values.username}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full rounded-xl bg-gray-200 p-2 lg:p-5 text-lg\"\n            placeholder=\"Usuario\"\n          />\n          <Input\n            id='password'\n            name=\"password\"\n            type=\"password\"\n            value={formik.values.password}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full rounded-xl bg-gray-200 p-2 lg:p-5 text-lg\"\n            placeholder=\"Contraseña\"\n          />\n          <Button\n            onClick={() => { }}\n            onClickValue={true}\n            customClassNames=\"bg-medium-turquoise p-4 w-full lg:w-96 rounded-lg text-white text-lg\"\n            type='submit'\n          >\n            Ingresar\n          </Button>\n        </Div>\n      </form>\n    </Main>\n  </>\n}","import classNames from 'classnames';\nimport { ISpan } from './Span.types';\n\n/**\n * @param {React.ReactDOM} children - Elements to render inside parent component\n * @param {Value | Mapping | Argument[]} customClassNames - Object with custom props for the classnames\n * @returns JSX/HTML Element wraps React Node Element that comes from the parent\n */\nexport default function Span({ children, customClassNames }: ISpan) {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------\n  // --- END: Data and handlers ------------------------------------------------\n  return <span className={classNames(customClassNames)}>{children}</span>;\n}\n","export enum EState {\n  Login = 0,\n  Register = 1\n}","import { useFormik } from \"formik\";\nimport * as Yup from 'yup';\n\nimport Button from \"../../atoms/Button\";\nimport Div from \"../../atoms/Div\";\nimport H1 from \"../../atoms/H1\";\nimport Input from \"../../atoms/Input/Input\";\nimport Main from \"../../atoms/Main\";\nimport Span from \"../../atoms/Span\";\nimport { sendEmail } from \"./Register.functions\";\n\nexport default function Register(){\n  // --- Hooks -----------------------------------------------------------------\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Required'),\n    id: Yup.string().required('Required'),\n    email: Yup.string().email('Invalid email').required('Required'),\n  })\n  const formik = useFormik({\n    initialValues: { name: '', email: '', id: '' },\n    onSubmit: (values) => {\n      sendEmail(values.name, values.email);\n      console.log(values);\n    },\n    validationSchema,\n  });\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------  \n  // --- END: Data and handlers ------------------------------------------------\n  return <>\n    <Main customClassNames=\"bg-desktop h-screen flex flex-1 justify-center items-center\">\n      <form onSubmit={formik.handleSubmit} className=\"bg-white w-4/5 lg:w-2/5 h-4/5 p-5 flex flex-col justify-center items-center gap-5\">\n        <H1 customClassNames=\"text-2xl\">Formato de Registro</H1>\n        <Div customClassNames=\"flex flex-col flex-1 w-full px-5 gap-5 justify-center\">\n          <Span>Nombre</Span>\n          <Input \n            id=\"name\" \n            name=\"name\" \n            type=\"text\" \n            value={formik.values.name}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full border-b-2 border-black\"\n          />\n          <Span>Correo Electronico</Span>\n          <Input \n            id=\"email\" \n            name=\"email\" \n            type=\"text\" \n            value={formik.values.email}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full border-b-2 border-black\"\n          />\n          <Span>Documento de Identidad</Span>\n          <Input \n            id=\"id\" \n            name=\"id\" \n            type=\"text\" \n            value={formik.values.id}\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            customClassNames=\"w-full border-b-2 border-black\"\n          />\n          <Span>Tipo de Donativo</Span>\n        </Div>\n        <Button \n          onClick={() => {}} \n          onClickValue={true} \n          customClassNames=\"bg-medium-turquoise p-4 w-full lg:w-96 rounded-lg text-white text-lg\"\n          type='submit'\n        >\n          Registrar\n        </Button>\n      </form >      \n    </Main>\n  </>\n}","import emailjs from \"@emailjs/browser\";\n\nexport const sendEmail = (to_name: string, to_email: string) => {\n  const templateParams = {\n    to_name,\n    to_email,\n    qr:\n      \"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=&\" +\n      to_email,\n  };\n  // serviceId, templateId, templateParams, publicKey\n  emailjs\n    .send(\n      \"service_8rujj47\",\n      \"template_t29chmv\",\n      templateParams,\n      \"cgmGhlqI_1tJf45Y3\"\n    )\n    .then(\n      (res) => {\n        console.log(\"respuesta de emailJs: \", res);\n      },\n      (err) => {\n        console.log(\"error de emailJs: \", err);\n      }\n    );\n};","import { useState } from 'react';\nimport Login from '../../components/templates/Login';\nimport Register from '../../components/templates/Register';\nimport { EState } from './Main.types';\n\nexport default function Main() {\n  // --- Hooks -----------------------------------------------------------------\n  // --- END: Hooks ------------------------------------------------------------\n\n  // --- Local state -----------------------------------------------------------\n  const [state, setState] = useState(EState.Login)\n  // --- END: Local state ------------------------------------------------------\n\n  // --- Refs ------------------------------------------------------------------\n  // --- END: Refs -------------------------------------------------------------\n\n  // --- Redux -----------------------------------------------------------------\n  // --- END: Redux ------------------------------------------------------------\n\n  // --- Side effects ----------------------------------------------------------\n  // --- END: Side effects -----------------------------------------------------\n\n  // --- Data and handlers -----------------------------------------------------  \n  // --- END: Data and handlers ------------------------------------------------\n  return <>\n    {state === EState.Login ? <Login setState={setState}/> : <Register />}\n  </>\n}"],"names":["Button","children","customClassNames","onClick","onClickValue","isDisabled","type","className","classNames","disabled","Div","ASide","Input","name","onChange","max","min","placeholder","Main","Login","setState","validationSchema","Yup","shape","username","required","password","formik","useFormik","initialValues","onSubmit","values","console","log","handleSubmit","id","value","onBlur","handleBlur","handleChange","Span","EState","Register","email","to_name","to_email","templateParams","qr","emailjs","then","res","err","sendEmail","useState","state"],"sourceRoot":""}